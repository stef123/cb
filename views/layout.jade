!!! 5
head
	meta(http-equiv='Content-Type', content='text/html;charset=utf-8')

	title('TESTAT titel')
	
	
	link(rel='shortcut icon', href='favicon.ico', type='image/x-icon')
	link(rel='stylesheet', type='text/css', href='/css/reset.css')
	link(rel='stylesheet', type='text/css', href='/js/jquery-ui/css/smoothness/jquery-ui-1.8.9.custom.css')
	link(rel='stylesheet', type='text/css', href='/css/cloudboard.css')
	link(rel='stylesheet', href='js/jQuery-File-Upload/jquery.fileupload-ui.css')

	script(src='//ajax.googleapis.com/ajax/libs/jquery/1.6.3/jquery.min.js')
	script(src='//ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js')
	
	script(src='js/dnd-file-upload/jquery.dnd-file-upload.js')
	script(src='js/dnd-file-upload/jquery.client.js')

	script(src='js/jQueryRotateCompressed.2.2.js')

	script(src='/socket.io/socket.io.js')

	script(type='text/javascript', src='js/jquery.rightClick.js')
	script(type='text/javascript', src='js/ajaxCall.js')
	script(type='text/javascript')
		$(document).ready(function(){

			var timeNow = new Date();
			var yearNow = timeNow.getFullYear();
			var monthNow = timeNow.getMonth() + 1;
			var dayNow = timeNow.getDate();
	
			//alert(yearNow + "-" + monthNow + "-" + dayNow);
	
			socket = io.connect('http://cb.no.de:8000');
			socket.on('connect', function(){
				//alert("tjohoo");
				populate(actualTime);
			});

		
			//When recieving a finished move signal - move all other clients object to that position.
		
			socket.on('move', function (data) {
				var idt = data.m_id;
				var leftt = data.m_left + "px";
				var topt = data.m_top +"px";
				$("#" + idt).css({'top': topt, 'left': leftt});
			});
			
			//When a move is initiated by another client - should lock the other cleints version of the object
			socket.on('move_start', function (data) {
				//alert(data.action);
				var idt = data.m_id;
				var leftt = data.m_left + "px";
				var topt = data.m_top + "px";
				$("#" + idt).css({'top': topt, 'left': leftt, 'opacity': '0.3'})
			});
			
			socket.on('move_stop', function (data) {
				//alert(data.action);
				var idt = data.m_id;
				var leftt = data.m_left + "px";
				var topt = data.m_top + "px";
				$("#" + idt).css({'top': topt, 'left': leftt, 'opacity': '1'})
			});
			
			//When a client starts a time travel, display a popup (just for debugging)
			socket.on('timetravel', function (data) {
				var timetravel = data.time;
				alert("A user moved to " + timetravel)
			});
			
			//When someone deletes something in the CloudBoard, re-populate every client
			socket.on('delete', function (data) {
				//alert(data.action);
				var idt = data.m_id;
				$("#" + idt).remove();

			});

			socket.on('resize', function (data) {
				var idt = data.m_id;
				var heightt = data.m_height +"px";
				var widtht = data.m_width +"px";
				$("#" + idt).css({'width': widtht, 'height': heightt});

			});
			
			//OK, lets set up the time slider
			
			var minDate=new Date('!{creationDate}');
			var maxDate=new Date('!{formattedDatetime}');
			var maxMonth = ((maxDate.getMonth())+1).toString();
			
			var maxDay = maxDate.getDate().toString();
			if (maxDay.length == 1) {
				maxDay = "0" + maxDay;
			}
			if (maxMonth.length == 1) {
				maxMonth = "0" + maxMonth;
			}
			var maxDateW3C = maxDate.getFullYear() + "-" +maxMonth + "-" + maxDay;
			var actualTime;
			var maxValue = Math.floor(((maxDate.getTime() - minDate.getTime()) / 86400000) +1);
			
			$('#slider').slider({
				max: maxValue,
				value: maxValue,
				
				slide: function(event, ui) {
					var date = new Date(minDate.getTime());
					date.setDate(date.getDate() + ui.value);
					
					if ($.datepicker.formatDate($.datepicker.W3C, date) == maxDateW3C) {
						$('#datum').replaceWith('<div id="datum">LIVE!</div>');
					}
					else {
						$('#datum').replaceWith('<div id="datum">' + $.datepicker.formatDate($.datepicker.W3C, date) + '</div>');
					}
					
					actualTime=$.datepicker.formatDate( $.datepicker.W3C,date);
				},
				stop:function(event,ui){
					var movedata={
						time:actualTime
					}
					//alert(movedata.action);
					socket.emit('timetravel',movedata);
					populate(actualTime);
				}
			});   
			
		//DONE WITH THE TIMESLIDER!
			
		
		
		
		});
		//DONE WITH THE ONDOCUMENTREADY
		
		//LETS FIX SOME OBJECTS TO THE SITE
		function populate(actualTime) {
			
			$('.resizable' ).resizable({
				
				aspectRatio: true,
				resize:function(e, ui){
					var myid=$(this).attr('id');
	
					var mywidth=ui.size.width;
					var myheight=ui.size.height;
					$(this).addClass("ontop");
					var resizedata = {
						action: 'resize',
						m_id: myid,
						m_width: mywidth,
						m_height: myheight
					}
					
					socket.emit('resize', resizedata);
				},
				
				
				
				stop: function(e, ui) {
					var myid=$(this).attr('id');
					var mywidth=ui.size.width;
					var myheight=ui.size.height;
					$(this).addClass("ontop");
					var resizedata = {
						action: 'resize_stop',
						m_id: myid,
						m_width: mywidth,
						m_height: myheight
					}

					
					socket.emit('resize_stop', resizedata);
				}
			
			
			});
			$('.draggable' ).draggable({
				start:function(e, ui){
					var myid=$(this).attr('id');
	
					var myleft=ui.position.left;
					var mytop=ui.position.top;
					$(this).addClass("ontop");
					var movedata = {
						action: 'move_start',
						m_id: myid,
						m_left: myleft,
						m_top: mytop
					}
					
					socket.emit('move_start', movedata);
				},
				
				drag:function(e, ui){
					var myid=$(this).attr('id');
	
					var myleft=ui.position.left;
					var mytop=ui.position.top;
					$(this).addClass("ontop");
					var movedata = {
						action: 'move',
						m_id: myid,
						m_left: myleft,
						m_top: mytop
					}
					
					socket.emit('move', movedata);
				},
				
				
				
				stop: function(e, ui) {
					var myid=$(this).attr('id');
					var myleft=ui.position.left;
					var mytop=ui.position.top;
					$(this).removeClass("ontop");
					var movedata = {
						action: 'move_stop',
						m_id: myid,
						m_left: myleft,
						m_top: mytop
					}
				
					socket.emit('move_stop', movedata);
		
					//alert("id: " + $(this).attr('id') + "position:" + ui.position.left + "," + ui.position.top);
				}
			});
			
			$( '.droppable' ).droppable({
				drop: function( event, ui ) {
					$(this)
					.addClass( "ui-state-highlight" )
					.find( "p" )
					.html( "Dropped!" );
				}
			});
			
			$('.kryss').click(function(e) {
				var myid = $(this).attr('id').substr(6);
				var deletedata = {
						action: 'delete',
						m_id: myid
					}

				socket.emit('delete', deletedata);
				$("#" + currentId).remove();
			});
			
			$('.comment').click(function(e) {
				var myid = $(this).attr('id').substr(8);
				alert(myid);
				$("#myid").rotate({
					bind:
						{
						click: function(){
							$(this).rotate({ angle:0,animateTo:90,easing: $.easing.easeInOutExpo });
						}
					}
			});

				//socket.emit('delete', deletedata);
				//$("#" + currentId).remove();
			});
		};
	
		
body
	.header
		.logo The CloudBoard
			small alpha 0.6.3
		.timeslider
			#slider
			#datum LIVE!
		#login
	
	#dynamic!=body
	
